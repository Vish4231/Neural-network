{"ast":null,"code":"var _jsxFileName = \"/Users/vishvasshiyam/Documents/Neural network/frontend/src/components/PredictionResultCard.tsx\";\nimport React from \"react\";\nimport { Card, CardContent, Typography, CircularProgress, Box, Avatar, Stack } from \"@mui/material\";\nimport { motion } from \"framer-motion\";\nimport DirectionsCarFilledIcon from \"@mui/icons-material/DirectionsCarFilled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getInitials = name => {\n  const parts = name.split(\" \");\n  return parts.map(p => p[0]).join(\"\").toUpperCase();\n};\nconst PredictionResultCard = ({\n  loading,\n  error,\n  result\n}) => {\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: 200,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3,\n        border: \"2px solid #e10600\",\n        boxShadow: 3,\n        borderRadius: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"error\",\n          variant: \"h6\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n  if (!result) return null;\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    initial: {\n      opacity: 0,\n      y: 30\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    transition: {\n      duration: 0.5\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3,\n        boxShadow: 3,\n        border: \"2px solid #e10600\",\n        borderRadius: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          mb: 1,\n          children: /*#__PURE__*/_jsxDEV(DirectionsCarFilledIcon, {\n            sx: {\n              color: '#e10600',\n              fontSize: 32,\n              opacity: 0.3\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          gutterBottom: true,\n          align: \"center\",\n          children: \"Predicted Top 5 Finishers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), result.top5 && Array.isArray(result.top5) ? /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 1,\n          children: result.top5.map((driver, idx) => /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: 2,\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              sx: {\n                bgcolor: \"primary.main\",\n                color: \"#fff\",\n                width: 36,\n                height: 36,\n                fontWeight: 700\n              },\n              children: getInitials(driver)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              fontWeight: 600,\n              color: idx < 3 ? \"primary.main\" : \"text.primary\",\n              children: [idx + 1, \". \", driver]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, this)]\n          }, driver, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"No prediction data available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), result.probabilities && /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            children: \"Probabilities:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), Object.entries(result.probabilities).map(([driver, prob]) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            children: [driver, \": \", (prob * 100).toFixed(1), \"%\"]\n          }, driver, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = PredictionResultCard;\nexport default PredictionResultCard;\nvar _c;\n$RefreshReg$(_c, \"PredictionResultCard\");","map":{"version":3,"names":["React","Card","CardContent","Typography","CircularProgress","Box","Avatar","Stack","motion","DirectionsCarFilledIcon","jsxDEV","_jsxDEV","getInitials","name","parts","split","map","p","join","toUpperCase","PredictionResultCard","loading","error","result","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","mt","border","boxShadow","borderRadius","color","variant","div","initial","opacity","y","animate","transition","duration","mb","fontSize","gutterBottom","align","top5","Array","isArray","spacing","driver","idx","gap","bgcolor","width","height","fontWeight","probabilities","Object","entries","prob","toFixed","_c","$RefreshReg$"],"sources":["/Users/vishvasshiyam/Documents/Neural network/frontend/src/components/PredictionResultCard.tsx"],"sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography, CircularProgress, Box, Avatar, Stack } from \"@mui/material\";\nimport { motion } from \"framer-motion\";\nimport DirectionsCarFilledIcon from \"@mui/icons-material/DirectionsCarFilled\";\n\ninterface PredictionResultCardProps {\n  loading: boolean;\n  error?: string;\n  result?: any;\n}\n\nconst getInitials = (name: string) => {\n  const parts = name.split(\" \");\n  return parts.map((p) => p[0]).join(\"\").toUpperCase();\n};\n\nconst PredictionResultCard: React.FC<PredictionResultCardProps> = ({ loading, error, result }) => {\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight={200}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n  if (error) {\n    return (\n      <Card sx={{ mt: 3, border: \"2px solid #e10600\", boxShadow: 3, borderRadius: 3 }}>\n        <CardContent>\n          <Typography color=\"error\" variant=\"h6\">{error}</Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n  if (!result) return null;\n  return (\n    <motion.div initial={{ opacity: 0, y: 30 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>\n      <Card sx={{ mt: 3, boxShadow: 3, border: \"2px solid #e10600\", borderRadius: 3 }}>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mb={1}>\n            <DirectionsCarFilledIcon sx={{ color: '#e10600', fontSize: 32, opacity: 0.3 }} />\n          </Box>\n          <Typography variant=\"h5\" gutterBottom align=\"center\">\n            Predicted Top 5 Finishers\n          </Typography>\n          {result.top5 && Array.isArray(result.top5) ? (\n            <Stack spacing={1}>\n              {result.top5.map((driver: string, idx: number) => (\n                <Box key={driver} display=\"flex\" alignItems=\"center\" gap={2}>\n                  <Avatar sx={{ bgcolor: \"primary.main\", color: \"#fff\", width: 36, height: 36, fontWeight: 700 }}>\n                    {getInitials(driver)}\n                  </Avatar>\n                  <Typography variant=\"body1\" fontWeight={600} color={idx < 3 ? \"primary.main\" : \"text.primary\"}>\n                    {idx + 1}. {driver}\n                  </Typography>\n                </Box>\n              ))}\n            </Stack>\n          ) : (\n            <Typography>No prediction data available.</Typography>\n          )}\n          {result.probabilities && (\n            <Box mt={2}>\n              <Typography variant=\"subtitle2\">Probabilities:</Typography>\n              {Object.entries(result.probabilities).map(([driver, prob]: [string, any]) => (\n                <Typography key={driver} variant=\"caption\">\n                  {driver}: {(prob * 100).toFixed(1)}%\n                </Typography>\n              ))}\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n};\n\nexport default PredictionResultCard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}